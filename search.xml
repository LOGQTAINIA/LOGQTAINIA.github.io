<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[向LLVM合并的第一个patch]]></title>
      <url>http://yoursite.com/2021/03/31/%25E5%2590%2591LLVM%25E6%258F%2590%25E4%25BA%25A4%25E7%259A%2584%25E7%25AC%25AC%25E4%25B8%2580%25E4%25B8%25AApatch/</url>
      <content type="html"><![CDATA[<p>终于向LLVM合并了第一个patch，成就感爆棚，谨以此文纪念一下。</p>
<p>虽然第一个patch只是删了三行注释，跟最初的设想差了十万八千里。</p>
<p>首先贴上<a href="https://reviews.llvm.org/rGd2d6720a93a2469fb3a752bd59674bd2cf97d91f">patch的地址</a>。</p>
<span id="more"></span>
<p>这个patch本来是在读代码的过程中，看到一段TODO注释，目测很简单，根据当前代码如法炮制了一段，提交Revision，连benchkmark都没跑，就是这么自（yu）信（chun）。</p>
<p>但是提交之后的好多天，自己标注的reviewers都没来理睬我的patch，我本来都不抱希望了，继续学着用llvm的测试框架test-suite和如何跑PGO测试；大约过了十几天，一天醒来，发现一个熟悉的名字（reviewer的）出现在了邮件的标题中，自己的first patch被review了！当时一下子就精神了。</p>
<p>果不其然，人家还是建议我跑一下benchmark，于是就有了之前那篇关于test-suite的文章。同时review也在回复中指出，在他的测试中，对于inline cost计算变得更加准确后，对于性能的提升并不明显，他的推测是，这些更加准确的cost并没有影响到critically important call sites。这点也在自己跑的SPEC2006 benchmark中得到了印证。同时这点也让我感到很吃惊，有点二八定律的感觉——计算二成的cost来揪出八成的important call sites进行内联。</p>
<p>但是，review很贴心地指出，不管我是冲着TODO做的，甚至是仅仅移除TODO注释，他都会很高兴LGTM。</p>
<p>本着奥卡姆剃刀法则，我选择删掉自己的代码，移除注释。</p>
]]></content>
      
        
        <tags>
            
            <tag> LLVM </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[字节跳动系统开发实习生面经]]></title>
      <url>http://yoursite.com/2021/03/28/%25E5%25AD%2597%25E8%258A%2582%25E8%25B7%25B3%25E5%258A%25A8%25E7%25B3%25BB%25E7%25BB%259F%25E5%25BC%2580%25E5%258F%2591%25E5%25AE%259E%25E4%25B9%25A0%25E7%2594%259F%25E9%259D%25A2%25E7%25BB%258F/</url>
      <content type="html"><![CDATA[<p>随着几天前HR小姐姐发来的offer，字节的实习求职算是告一段落了，趁着还没有忘光，赶紧留下一篇记录。</p>
<p>首先明确一下所投的岗位，虽然标题和联系邮件都写着的系统开发，但是在麻烦同学联系内推的时候，我是朝着编译相关的岗位去的，因为自己的硕士研究方向和所做的远程实习都是跟编译器打交道的。最后联系到的内推也是STE（System Technology&amp;Engineering）部门的性能优化方向职位（实际工作内容是编译器）。这里也提醒一下想找工作的你，联系内推的时候最好还是点对点的内推，直接推到某个部门的对应岗位或者是小组，最大限度地确保自己跟岗位的匹配程度。</p>
<p>进入正题前，先说一下，自己好像已经忘了很多了，下面的只是还能回忆起来的部分的问题。</p>
<span id="more"></span>
<h3 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h3><p>基本所有问题都是围绕着简历上的内容和岗位专业方向的。</p>
<p>简历上的内容主要是指研究方向和远程实习涉及到的内容。</p>
<ul>
<li>跟研究方向（我的研究课题是内联优化）相关的，内联优化的优点</li>
</ul>
<p>岗位专业方向的主要是一些知识性的。比如</p>
<ul>
<li>编程语言<ul>
<li>闭包的实现</li>
<li>C++中虚函数的代码存放在内存的哪个区域</li>
<li>了解C++20特性吗</li>
</ul>
</li>
<li>编译原理<ul>
<li>fall-through为什么快</li>
<li>知道LTO，PGO吗</li>
<li>指令调度，背景，影响指令调度的因素</li>
</ul>
</li>
<li>静态分析<ul>
<li>传递函数的特点</li>
<li>SSA的优点，在源码中的实现</li>
</ul>
</li>
<li>其他<ul>
<li>了解过什么性能分析的工具吗</li>
</ul>
</li>
<li>最后的代码题，拓扑排序（因为在编译方向经常会遇到，感觉这个编程题还挺接地气的）</li>
</ul>
<p>总结一下，一面感觉是主要是在确认知识的广度，有很多东西只知道名词，但是没具体了解过，有一些问题面试官也会做引导，体验很棒。</p>
<h3 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h3><p>二面的面试官从气场上感觉是个leader，可能是小组的吧？现在也不确定。</p>
<p>二面内容主要是围绕简历内容，比一面的重视广度比起来，更加重视深度，比如研究方向内联优化具体的代码和实现看过没有，远程实习中具体做过的事情，围绕做过的事情的进一步提问。</p>
<p>二面的话，只能说真金不怕火炼，自己做过的事情肯定没人比自己更了解。</p>
<h3 id="三面"><a href="#三面" class="headerlink" title="三面"></a>三面</h3><p>一开始闲聊了一些，比如为什么选择这个底层的编译器岗。</p>
<p>正式的问题主要都是专业基础课。。。。</p>
<p>TCP三次握手和四次挥手，TLB是什么，开机时软件做的事情。</p>
<p>编程题第一道，用C写，统计一个字符串中长度最长的单词。</p>
<p>第二题，给一个数组，和一个整数m，往数组上面的部分数字上加，使得最后数组变得“均衡”，这个均衡还是让我自己定义的。。还让我想几个算法自己比较一下。。</p>
<p>最后在反问环节，得到的反馈是，基础不太行。。</p>
<p>也是在反问环节得知这个三面是交叉面试，我一个来找实习的我？？？？</p>
<h3 id="HR面"><a href="#HR面" class="headerlink" title="HR面"></a>HR面</h3><p>主要是围绕简历问的主观问题。比如</p>
<ul>
<li>平时有做博客或者知识记录吗</li>
<li><p>会看网上的文章或者博客学习吗</p>
</li>
<li><p>为什么选择这个岗位（因为本科专业软硬兼顾，而这个岗位是偏重软）</p>
</li>
<li><p>自己最喜欢哪个项目</p>
</li>
<li>做项目遇到的比较大的困难</li>
<li>现在学了这么多，回头看以前做的项目感觉有什么不足</li>
<li>有没有投其他的互联网大厂，为什么选择字节</li>
<li>为什么去日本读研</li>
</ul>
<h3 id="非干货的纯闲聊"><a href="#非干货的纯闲聊" class="headerlink" title="非干货的纯闲聊"></a>非干货的纯闲聊</h3><p>面试的具体问题就是上面那些了，这里是一些自己的主观感受。</p>
<p>一面面试官一开始提到b站上我的一个讲v8寄存器分配的视频，当时震惊了一下，没想到面试官知道我在b站上的视频，另外就是，那个视频真的有人看啊！不过一面面试官也提到了，知道中科院PLCT实验室经常做技术分享，看来他平时也会默默关注这些，好感+1。</p>
<p>一面面试官在问问题的时候也会做一些引导，从来龙去脉上给一些提示，这也是让我觉得体验很棒的一点。</p>
<p>三面在面试之前我以为只是简单的聊一聊，结果开始之后才发现越来越不对劲，心态逐渐崩坏，直到反问环节才知道是交叉面试，面试官不是搞编译的，所以只能问基础问题。。但是在编程题时定义问题不清晰，之后的提问也大多没有引导，让我在三面结束后心态有点受影响，好在第二天HR小姐姐的联系电话终结了自己的忐忑。</p>
<p>HR面咱先不提HR小姐姐有多好看，就提的问题而言，体验很好，并没有在网上说的那些——性格、优缺点、职业规划、加班态度等；反而都是跟自己密切相关的问题，让人有话可讲，真不错。</p>
<p>除了经历的面试本身，还有一点印象很深，那就是我发现自己经历的面试跟网上看到的面经出入挺大的。网上看了那么多面经，除了增加焦虑以外帮助甚微，有可能是岗位的差异导致的？与其看那些面经，还不如摆正心态，把功夫下在自己的专长的地方；小马过河的故事大家都知道的嘛。</p>
<hr>
<p><strong>追记：</strong>关于最后一点，自己的经历跟网上的大多数面经出入很大，又跟友人S聊了一下，感觉很有必要在这里提及一下，因为自己的情况本身就是属于偏差很大，数量很少的样本，即专业方向跟岗位匹配程度很高的样本；而网上的大部分面经，或者说大部分人，根据他们的情况只能从基础问题问起。</p>
<p>其次，被问到的问题也会受到自己的简历的内容，面试官自身所影响，这篇面经可参考的价值又少了不少2333。</p>
]]></content>
      
        
        <tags>
            
            <tag> 字节跳动 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[记录构建test-suite时遇到的一个问题（开启PGO选项）]]></title>
      <url>http://yoursite.com/2021/03/27/%25E8%25AE%25B0%25E5%25BD%2595%25E7%25BC%2596%25E8%25AF%2591test-suite%25E6%2597%25B6%25E9%2581%2587%25E5%2588%25B0%25E7%259A%2584%25E4%25B8%2580%25E4%25B8%25AA%25E9%2597%25AE%25E9%25A2%2598%25EF%25BC%2588%25E5%25BC%2580%25E5%2590%25AFPGO%25E9%2580%2589%25E9%25A1%25B9%25EF%25BC%2589/</url>
      <content type="html"><![CDATA[<p>这几天在学着用test-suite来跑benchmark，主要是为了之后的研究课题做准备。test-suite的基本构建和使用没问题了，但是在准备构建带有PGO（Profile Guided Optimization）的版本时，遇到了点问题，折腾了两天终于解决了。</p>
<span id="more"></span>
<p>一切要从参考test-suite的<a href="https://llvm.org/docs/TestSuiteGuide.html">官网</a>构建说起，首先是普通的构建</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">% mkdir test-suite-build</span><br><span class="line">% <span class="built_in">cd</span> test-suite-build</span><br><span class="line">% cmake -DCMAKE_C_COMPILER=&lt;path to llvm build&gt;/bin/clang \</span><br><span class="line">        -C../test-suite/cmake/caches/O3.cmake \</span><br><span class="line">        ../test-suite</span><br></pre></td></tr></table></figure>
<p>构建没问题，跑测试没问题，跑benchmark没问题；好，很有精神！</p>
<p>之后准备构建用来跑PGO的test-suite，依然是参考官网的选项</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Profile generation run:</span></span><br><span class="line">% cmake -DTEST_SUITE_PROFILE_GENERATE=ON \</span><br><span class="line">        -DTEST_SUITE_RUN_TYPE=train \</span><br><span class="line">        ../test-suite</span><br><span class="line">% make</span><br><span class="line">% llvm-lit .</span><br></pre></td></tr></table></figure>
<p>构建，有问题！</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[ 83%] Building C object SingleSource/Regression/C/gcc-c-torture/execute/ieee/CMakeFiles/GCC-C-execute-ieee-fp-cmp-8e.dir/fp-cmp-8e.c.o</span><br><span class="line">[ 83%] Building C object SingleSource/Regression/C/gcc-c-torture/execute/ieee/CMakeFiles/GCC-C-execute-ieee-fp-cmp-3.dir/fp-cmp-3.c.o</span><br><span class="line">CMakeFiles/GCC-C-execute-ieee-compare-fp-3.dir/compare-fp-3.c.o: In <span class="keyword">function</span> `test2<span class="string">&#x27;:</span></span><br><span class="line"><span class="string">compare-fp-3.c:(.text+0x4d): undefined reference to `link_error0&#x27;</span></span><br><span class="line">CMakeFiles/GCC-C-execute-ieee-compare-fp-3.dir/compare-fp-3.c.o: In <span class="keyword">function</span> `test3<span class="string">&#x27;:</span></span><br><span class="line"><span class="string">compare-fp-3.c:(.text+0x8d): undefined reference to `link_error0&#x27;</span></span><br><span class="line">CMakeFiles/GCC-C-execute-ieee-compare-fp-3.dir/compare-fp-3.c.o: In <span class="keyword">function</span> `test5<span class="string">&#x27;:</span></span><br><span class="line"><span class="string">compare-fp-3.c:(.text+0x113): undefined reference to `link_error1&#x27;</span></span><br><span class="line">CMakeFiles/GCC-C-execute-ieee-compare-fp-3.dir/compare-fp-3.c.o: In <span class="keyword">function</span> `test6<span class="string">&#x27;:</span></span><br><span class="line"><span class="string">compare-fp-3.c:(.text+0x163): undefined reference to `link_error1&#x27;</span></span><br><span class="line">CMakeFiles/GCC-C-execute-ieee-compare-fp-3.dir/compare-fp-3.c.o: In <span class="keyword">function</span> `all_tests<span class="string">&#x27;:</span></span><br><span class="line"><span class="string">compare-fp-3.c:(.text+0x1f0): undefined reference to `link_error0&#x27;</span></span><br><span class="line">compare-fp-3.c:(.text+0x223): undefined reference to `link_error0<span class="string">&#x27;</span></span><br><span class="line"><span class="string">compare-fp-3.c:(.text+0x2f6): undefined reference to `link_error1&#x27;</span></span><br><span class="line">compare-fp-3.c:(.text+0x344): undefined reference to `link_error1<span class="string">&#x27;</span></span><br><span class="line"><span class="string">[ 83%] Linking C executable GCC-C-execute-ieee-fp-cmp-1</span></span><br><span class="line"><span class="string">clang-12: error: linker command failed with exit code 1 (use -v to see invocation)</span></span><br><span class="line"><span class="string">[ 83%] Building C object SingleSource/Regression/C/gcc-c-torture/execute/ieee/CMakeFiles/GCC-C-execute-ieee-fp-cmp-8l.dir/fp-cmp-8l.c.o</span></span><br></pre></td></tr></table></figure>
<p>我这一个萌新看到这么一个巨型项目报错，很方啊。先是去网上搜，无果；群里问，无果；自己折腾了好久，最后的结论只是<code>-DTEST_SUITE_PROFILE_GENERATE=ON</code>这个选项会导致error。无奈睡前斗胆往llvm-dev邮件列表里发了一封<a href="https://lists.llvm.org/pipermail/llvm-dev/2021-March/149429.html">求助邮件</a>，睡醒看到两位大佬的回信，受到启发的我把注意力从error本身转移到报错的文件上，即<code>compare-fp-3.c</code>。文件的逻辑大体上是，测试编译器是否会在开启编译优化的情况下，将无效分支给消除掉</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">link_error0</span> <span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">link_error1</span> <span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">test1 (<span class="keyword">float</span> x, <span class="keyword">float</span> y)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ((x==y) &amp;&amp; (x!=y))</span><br><span class="line">    link_error0();</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __OPTIMIZE__</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">link_error0</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">link_error1</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* ! __OPTIMIZE__ */</span>  </span></span><br></pre></td></tr></table></figure>
<p>看来是实际优化（无用分支是否被消除掉）和优化选项是否开启（是否有<code>__OPTIMIZE__</code>宏定义）之间的冲突。虽然知道了为什么这个文件报错，但是还是不知道是哪里导致的冲突。</p>
<p>然后又是走投无路，只能追着<code>-DTEST_SUITE_PROFILE_GENERATE=ON</code>编译选项去啃CMAKE规则文件，最后定位到的地方是<code>test-suite/CMakeLists.txt:137</code></p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(TEST_SUITE_PROFILE_GENERATE)</span><br><span class="line">  <span class="keyword">find_program</span>(TEST_SUITE_LLVM_PROFDATA NAMES <span class="string">&quot;llvm-profdata&quot;</span></span><br><span class="line">               HINTS <span class="variable">$&#123;CMAKE_C_COMPILER_DIRECTORY&#125;</span>)</span><br><span class="line">  <span class="keyword">mark_as_advanced</span>(TEST_SUITE_LLVM_PROFDATA)</span><br><span class="line">  <span class="keyword">if</span>(TEST_SUITE_LLVM_PROFDATA <span class="keyword">STREQUAL</span> <span class="string">&quot;TEST_SUITE_LLVM_PROFDATA-NOTFOUND&quot;</span>)</span><br><span class="line">    <span class="keyword">message</span>(FATAL_ERROR <span class="string">&quot;llvm-profdata not found.</span></span><br><span class="line"><span class="string">Make sure it is in your path or set TEST_SUITE_PROFILE_GENERATE to OFF&quot;</span>)</span><br><span class="line">  <span class="keyword">endif</span>()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span>(TEST_SUITE_PROFILE_GENERATE <span class="string">&quot;True&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span>(profile_instrumentation_flags -fprofile-instr-generate)</span><br><span class="line">  <span class="keyword">if</span>(TEST_SUITE_USE_IR_PGO)</span><br><span class="line">    <span class="keyword">set</span>(profile_instrumentation_flags -fprofile-generate)</span><br><span class="line">  <span class="keyword">endif</span>()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">list</span>(APPEND CFLAGS   <span class="variable">$&#123;profile_instrumentation_flags&#125;</span>)</span><br><span class="line">  <span class="keyword">list</span>(APPEND CXXFLAGS <span class="variable">$&#123;profile_instrumentation_flags&#125;</span>)</span><br><span class="line">  <span class="keyword">list</span>(APPEND LDFLAGS  <span class="variable">$&#123;profile_instrumentation_flags&#125;</span>)</span><br><span class="line"><span class="keyword">else</span>()</span><br><span class="line">  <span class="keyword">set</span>(TEST_SUITE_PROFILE_GENERATE <span class="string">&quot;False&quot;</span>)</span><br><span class="line"><span class="keyword">endif</span>()</span><br></pre></td></tr></table></figure>
<p>值得注意的是if分支最后的几行</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span>(profile_instrumentation_flags -fprofile-instr-generate)</span><br><span class="line"><span class="keyword">if</span>(TEST_SUITE_USE_IR_PGO)</span><br><span class="line">  <span class="keyword">set</span>(profile_instrumentation_flags -fprofile-generate)</span><br><span class="line"><span class="keyword">endif</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">list</span>(APPEND CFLAGS   <span class="variable">$&#123;profile_instrumentation_flags&#125;</span>)</span><br><span class="line"><span class="keyword">list</span>(APPEND CXXFLAGS <span class="variable">$&#123;profile_instrumentation_flags&#125;</span>)</span><br><span class="line"><span class="keyword">list</span>(APPEND LDFLAGS  <span class="variable">$&#123;profile_instrumentation_flags&#125;</span>)</span><br></pre></td></tr></table></figure>
<p>看来在打开<code>TEST_SUITE_PROFILE_GENERATE</code>选项时，会追加一个FLAG给编译器，接下来我继续谷歌这个FLAG<code>-fprofile-instr-generate</code>，发现时属于clang编译器的，之后我本来想在代码里找到它跟<code>__OPTIMIZE__</code>的联系，无果；又是山穷水尽的时候，这时候突然想到目前已知的几个条件，为何不直接测试clang中能不能触发这个冲突呢。然后就有了最关键的实验</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># in ~ [21:19:43] C:1</span></span><br><span class="line">$ clang -fprofile-instr-generate compare-fp-3.c</span><br><span class="line"></span><br><span class="line"><span class="comment"># in ~ [21:19:51]</span></span><br><span class="line">$ clang -O3 -fprofile-instr-generate compare-fp-3.c</span><br><span class="line">/tmp/compare-fp-3-227c03.o: In <span class="keyword">function</span> `test2<span class="string">&#x27;:</span></span><br><span class="line"><span class="string">compare-fp-3.c:(.text+0x4d): undefined reference to `link_error0&#x27;</span></span><br><span class="line">/tmp/compare-fp-3-227c03.o: In <span class="keyword">function</span> `test3<span class="string">&#x27;:</span></span><br><span class="line"><span class="string">compare-fp-3.c:(.text+0x8d): undefined reference to `link_error0&#x27;</span></span><br><span class="line">/tmp/compare-fp-3-227c03.o: In <span class="keyword">function</span> `test5<span class="string">&#x27;:</span></span><br><span class="line"><span class="string">compare-fp-3.c:(.text+0x113): undefined reference to `link_error1&#x27;</span></span><br><span class="line">/tmp/compare-fp-3-227c03.o: In <span class="keyword">function</span> `test6<span class="string">&#x27;:</span></span><br><span class="line"><span class="string">compare-fp-3.c:(.text+0x163): undefined reference to `link_error1&#x27;</span></span><br><span class="line">/tmp/compare-fp-3-227c03.o: In <span class="keyword">function</span> `all_tests<span class="string">&#x27;:</span></span><br><span class="line"><span class="string">compare-fp-3.c:(.text+0x1f0): undefined reference to `link_error0&#x27;</span></span><br><span class="line">compare-fp-3.c:(.text+0x223): undefined reference to `link_error0<span class="string">&#x27;</span></span><br><span class="line"><span class="string">compare-fp-3.c:(.text+0x2f6): undefined reference to `link_error1&#x27;</span></span><br><span class="line">compare-fp-3.c:(.text+0x344): undefined reference to `link_error1<span class="string">&#x27;</span></span><br><span class="line"><span class="string">clang-12: error: linker command failed with exit code 1 (use -v to see invocation)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># in ~ [21:20:34] C:1</span></span><br><span class="line"><span class="string">$ clang -O0 -fprofile-instr-generate compare-fp-3.c</span></span><br></pre></td></tr></table></figure>
<p>复现成功！这时突然注意到，最开始构建test-suite的时候，是开启了O3优化</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> mkdir test-suite-build</span></span><br><span class="line"><span class="meta">%</span><span class="bash"> <span class="built_in">cd</span> test-suite-build</span></span><br><span class="line"><span class="meta">%</span><span class="bash"> cmake -DCMAKE_C_COMPILER=&lt;path to llvm build&gt;/bin/clang \</span></span><br><span class="line"><span class="bash">        -C../test-suite/cmake/caches/O3.cmake \</span></span><br><span class="line"><span class="bash">        ../test-suite</span></span><br></pre></td></tr></table></figure>
<hr>
<p>在分析出原因之后，我以为只要把上面的O3缓存改成O0缓存就没问题了，还是图样图森破，并不管用。在跟CMAKE纠缠中又度过了一天，在这个过程中也在测试用的.c文件中写上宏编译判断是否有<code>__OPTIMIZE__</code>宏定义，不出意外的有，但就是想不到这个幽灵一样的宏定义是从哪来的。</p>
<p>最后又把关注点移回到了CMAKE上，从原始缓存<code>O0.cmake</code>文件到生成的缓存<code>CMakeCache.txt</code>文件。最后通过在<code>CMakeLists.txt</code>中打印相关的变量，发现好像是<code>O0.cmake</code>这个原始缓存文件的信息没有成功写入，照着这个思路一谷歌，还真找到了<a href="https://stackoverflow.com/questions/46399591/why-does-this-cmake-initial-cache-file-result-in-such-strange-errors">答案</a></p>
<blockquote>
<p>So CMake is ignoring your <code>-C</code> option here and tries to load your <code>CMakeCache.txt</code> as an actual variable cache file. And those files have a different formatting/syntax of <code>NAME:TYPE=VALUE</code>.</p>
</blockquote>
<p>原来是当<code>CMakeCache.txt</code>存在时，原始缓存<code>O0.cmake</code>文件会被忽略。</p>
<p>最后的解决方法也瞬间明了了。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rm CMakeCache.txt</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> cmake -DCMAKE_C_COMPILER=&lt;path to llvm build&gt;/bin/clang \</span></span><br><span class="line"><span class="bash">        -C../test-suite/cmake/caches/O0.cmake \</span></span><br><span class="line"><span class="bash">        ../test-suite</span></span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>总结一下，</p>
<ol>
<li>这个error是由于O3优化和<code>TEST_SUITE_PROFILE_GENERATE</code>导致的冲突。仔细想一下，用来生成profile信息的程序当然不能用优化后的程序来profile呀。</li>
<li>对于CMAKE，当<code>CMakeCache.txt</code>存在时，原始缓存<code>O0.cmake</code>文件会被忽略。这点还真是让我挺吃惊的。</li>
</ol>
<p>虽然又是一个历经险阻找到原因后直感自己蠢的场景，但是在这种巨型项目面前找到最后的拼图的感觉，还是异常爽快的。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>不知不觉，距离上一次更新博客已经三年半了，这次重启博客的动机主要有两个，一个是来自友人L的威胁</p>
<blockquote>
<p>那我就要取关了</p>
</blockquote>
<p>怎么能允许这种事情发生呢，好汉请留步，我什么都会做的，拜托了，我什么都会做的！</p>
<p>第二个是昨天（3.26）字节实习最后的HR面试，HR小姐姐也建议做一些知识输出，看在她那么好看的份上，我就勉（xin）为（xi）其（ruo）难（kuang）地采纳她的建议吧。</p>
]]></content>
      
        
        <tags>
            
            <tag> LLVM </tag>
            
            <tag> 编译原理 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[用正则表达式判断一个二进制数能否被3整除]]></title>
      <url>http://yoursite.com/2017/09/07/%25E7%2594%25A8%25E6%25AD%25A3%25E5%2588%2599%25E8%25A1%25A8%25E8%25BE%25BE%25E5%25BC%258F%25E5%2588%25A4%25E6%2596%25AD%25E4%25B8%2580%25E4%25B8%25AA%25E4%25BA%258C%25E8%25BF%259B%25E5%2588%25B6%25E6%2595%25B0%25E8%2583%25BD%25E5%2590%25A6%25E8%25A2%25AB3%25E6%2595%25B4%25E9%2599%25A4/</url>
      <content type="html"><![CDATA[<p>问题描述如标题，很简洁：用一个正则表达式判断一个二进制数能否被3整除</p>
<p>比如：<br>000         True<br>11        True<br>1001    True<br>1011     False</p>
<span id="more"></span>
<p>解决思路也很简单：首先用有限状态机（FSM）实现对能否被3整除的判断，然后将其转换成正则</p>
<p>有限状态机图如下，分析过程摘自matrix67，并在此感谢一下神犇</p>
<p><img src="http://www.matrix67.com/blogimage/200812011.gif" alt=""></p>
<blockquote>
<p>注意到，一个二进制数后面加一个“0”相当于该数乘以2，一个二进制数后面加一个“1”相当于该数乘2加1。设定三个状态，分别叫做0、1和2，它们表示当前的数除以3所得的余数。如果对于某个i和j，有i*2≡j (mod 3)，就加一条路径i→j，路径上标一个字符“0”；如果i*2+1≡j (mod 3)，则在路径i→j上标记“1”。状态0既是我们的初始状态，也是我们的最终状态。我们的自动机就做好了。现在，假如二进制数10010走进来了。从状态0出发，机器首先读到一个“1”，于是当前位置挪到状态1，表明目前该数模3余1；然后，系统读了一个“0”，我们紧跟着走到状态2，表明二进制数“10”被3除余2；下一步，我们回到状态1，表明“100”除以3余1；再往后，我们得知“1001”能被3整除。最后呢，我们读到一个0，“1001”的两倍当然还是能被3整除，我们依旧停留在原位。我们得到结论：二进制数10010能被3整除。<br>    有限状态自动机是可以转化为正则表达式的。上面的这个自动机转化起来非常容易。我们可以先试着用自然语言叙述一下。首先，每个二进制数第一位必然为“1”。到达状态1后，我们可以随意地、任意多次地在状态1周围绕圈圈，最终回到状态1。临近末尾，我们再读到一个“1”返回状态0，这之后随便读多少个“0”都可以了。现在问题分解为：我们又如何用正则表达式表述“从状态1出发随意地走最终回到状态1”呢？在本例中，这是很好描述的：它可以是字符串“1000..001”和“0111..110”的任意组合。把这些东西用正则表达式写出来，就是我们刚才那个神秘的式子：1((10*1)|(01*0))*10* 。</p>
</blockquote>
<p>最后再加上位置标识符，<code>^1((10*1)|(01*0))*10*$</code></p>
<p>从matrix67的分析自然语言可以理解正则，但是从有限状态机转换到正则的通式通法还不会。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://blog.2baxb.me/archives/588">使用正则表达式判断二进制数字是否能被3整除</a></p>
<p><a href="http://www.matrix67.com/blog/archives/1089">趣题：用正则表达式判断一个二进制数是否能被3整除</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 算法与数据结构 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ubuntu下安装jsoncpp时遇到的坑]]></title>
      <url>http://yoursite.com/2017/07/21/ubuntu%25E4%25B8%258B%25E5%25AE%2589%25E8%25A3%2585jsoncpp%25E6%2597%25B6%25E9%2581%2587%25E5%2588%25B0%25E7%259A%2584%25E5%259D%2591/</url>
      <content type="html"><![CDATA[<p>为了在C++程序中解析json文件而选择了jsoncpp，但是安装过程并不是那么顺利，特写此文来记录踩过的坑<br><span id="more"></span><br>首先是执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libjsoncpp-dev</span><br></pre></td></tr></table></figure><br>时遇到如下报错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Errors were encountered while processing:</span><br><span class="line"> python-gtk2-dev</span><br><span class="line">E: Sub-process &#x2F;usr&#x2F;bin&#x2F;dpkg returned an error code (1)</span><br></pre></td></tr></table></figure></p>
<p>解决办法：<br>分别执行下面两行命令，注意把<code>PACKAGE</code>替换为<code>python-gtk2-dev</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mv &#x2F;var&#x2F;lib&#x2F;dpkg&#x2F;info&#x2F;PACKAGE.* &#x2F;tmp&#x2F;</span><br><span class="line">dpkg --remove --force-remove-reinstreq PACKAGE</span><br></pre></td></tr></table></figure><br>之后再执行<code>install</code>指令就能安装jsoncpp了</p>
<hr>
<p>安装后，使用如下命令编译时报错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ server.cpp -o server</span><br></pre></td></tr></table></figure><br>报错信息如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server.cpp:14:23: fatal error: json&#x2F;json.h: No such file or directory</span><br><span class="line">compilation terminated.</span><br></pre></td></tr></table></figure><br>解决办法：<br>将代码中的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;json&#x2F;json.h&gt;</span><br></pre></td></tr></table></figure><br>换成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;jsoncpp&#x2F;json&#x2F;json.h&gt;</span><br></pre></td></tr></table></figure><br>同时将编译命令换成</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ server.cpp -o server -ljsoncpp</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://askubuntu.com/questions/618227/problems-with-python-gtk2-dev-after-update-to-ubuntu-15-04">Problems with python-gtk2-dev after update to Ubuntu 15.04</a></p>
<p><a href="Fatal error with jsoncpp while compiling">Fatal error with jsoncpp while compiling</a></p>
]]></content>
      
        
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[树莓派变身路由器]]></title>
      <url>http://yoursite.com/2017/07/19/%25E6%25A0%2591%25E8%258E%2593%25E6%25B4%25BE%25E5%258F%2598%25E8%25BA%25AB%25E8%25B7%25AF%25E7%2594%25B1%25E5%2599%25A8/</url>
      <content type="html"><![CDATA[<p>最近在北海道大学参加HSI项目，由于宿舍没有无线网络，只有网线，而我又不想让笔记本24小时全天候开着当路由器，是时候折腾树莓派了！</p>
<p>因为最新的树莓派3板载了无线网络适配器，所以可以像手机一样开启热点，变身成一个路由器。<br><span id="more"></span></p>
<hr>
<h1 id="安装软件包"><a href="#安装软件包" class="headerlink" title="安装软件包"></a>安装软件包</h1><p>需要安装2个软件包</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install hostapd dnsmasq</span><br></pre></td></tr></table></figure>
<p>hostapd 是 Host Access Point 守护进程，提供对基于 Linux 的无线接入点的强 WPA2 加密和身份验证。配置 hostapd 非常简单，它支持 WPA2-Personal 和 Enterprise，提供了对 WPA2-Personal 的独特修改，可让管理它变得更复杂或更简单。</p>
<p>dnsmasq是一个小巧且方便地用于配置DNS和DHCP的工具，适用于小型网络，它提供了DNS功能和可选择的DHCP功能。主用适用于NAT的家庭网络，用modem，cable modem，ADSL设备连接到因特网。</p>
<hr>
<h1 id="设置静态IP"><a href="#设置静态IP" class="headerlink" title="设置静态IP"></a>设置静态IP</h1><p>需要将无线接口wlan0的IP配置成静态地址<br>首先让dhcpcd不再管理wlan0，避免设置冲突<br>修改文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi &#x2F;etc&#x2F;dhcpcd.conf</span><br></pre></td></tr></table></figure></p>
<p>在文件开头增加一行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">denyinterfaces wlan0</span><br></pre></td></tr></table></figure>
<p>接下来设置wlan0的静态IP，修改文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi &#x2F;etc&#x2F;network&#x2F;interfaces</span><br></pre></td></tr></table></figure></p>
<p>把wlan0相关的内容改成为如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">allow-hotplug wlan0</span><br><span class="line">#iface wlan0 inet manual</span><br><span class="line">#    wpa-conf &#x2F;etc&#x2F;wpa_supplicant&#x2F;wpa_supplicant.conf</span><br><span class="line">iface wlan0 inet static</span><br><span class="line">	address 192.168.8.1</span><br><span class="line">	netmask 255.255.255.0</span><br><span class="line">	network 192.168.8.0</span><br><span class="line">	broadcast 192.168.8.255</span><br></pre></td></tr></table></figure></p>
<p>192.168.8.1是给树莓派做路由器分配的网关IP，不能与局域网其他路由器网关IP重复，若重复此处可改成其他网关。</p>
<p>重启服务和wlan0</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo service dhcpcd restart</span><br><span class="line">sudo ifdown wlan0</span><br><span class="line">sudo ifup wlan0</span><br></pre></td></tr></table></figure>
<p>通过<code>ifconfig</code>可以看到wlan0的IP已经被修改</p>
<p>PS：当时本想着让树莓派接入笔记本的热点，然后在笔记本上登录树莓派并配置，但是固定完IP之后就无法连入笔记本的热点了，最后是用手机USB数据线连接树莓派，手机登录树莓派，然后再用笔记本来远程控制手机，把手机屏幕和输入交给笔记本来搞的，别提多蛋疼了。。</p>
<hr>
<h1 id="配置hostapd"><a href="#配置hostapd" class="headerlink" title="配置hostapd"></a>配置hostapd</h1><p>新建配置文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi &#x2F;etc&#x2F;hostapd&#x2F;hostapd.conf</span><br></pre></td></tr></table></figure>
<p>添加如下代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"># This is the name of the WiFi interface we configured above</span><br><span class="line">interface&#x3D;wlan0</span><br><span class="line"></span><br><span class="line"># Use the nl80211 driver with the brcmfmac driver</span><br><span class="line">driver&#x3D;nl80211</span><br><span class="line"></span><br><span class="line"># This is the name of the network</span><br><span class="line">ssid&#x3D;RaspberryPi</span><br><span class="line"></span><br><span class="line"># Use the 2.4GHz band</span><br><span class="line">hw_mode&#x3D;g</span><br><span class="line"></span><br><span class="line"># Use channel 6</span><br><span class="line">channel&#x3D;6</span><br><span class="line"></span><br><span class="line"># Enable 802.11n</span><br><span class="line">ieee80211n&#x3D;1</span><br><span class="line"></span><br><span class="line"># Enable WMM</span><br><span class="line">wmm_enabled&#x3D;1</span><br><span class="line"></span><br><span class="line"># Enable 40MHz channels with 20ns guard interval</span><br><span class="line">ht_capab&#x3D;[HT40][SHORT-GI-20][DSSS_CCK-40]</span><br><span class="line"></span><br><span class="line"># Accept all MAC addresses</span><br><span class="line">macaddr_acl&#x3D;0</span><br><span class="line"></span><br><span class="line"># Use WPA authentication</span><br><span class="line">auth_algs&#x3D;1</span><br><span class="line"></span><br><span class="line"># Require clients to know the network name</span><br><span class="line">ignore_broadcast_ssid&#x3D;0</span><br><span class="line"></span><br><span class="line"># Use WPA2</span><br><span class="line">wpa&#x3D;2</span><br><span class="line"></span><br><span class="line"># Use a pre-shared key</span><br><span class="line">wpa_key_mgmt&#x3D;WPA-PSK</span><br><span class="line"></span><br><span class="line"># The network passphrase</span><br><span class="line">wpa_passphrase&#x3D;raspberry</span><br><span class="line"></span><br><span class="line"># Use AES, instead of TKIP</span><br><span class="line">rsn_pairwise&#x3D;CCMP</span><br></pre></td></tr></table></figure>
<p>上述代码中，<code>ssid</code>和<code>wpa_passphrase</code>分别是无线网络的名字和密码（密码需8位以上）</p>
<p>然后测试配置是否正确，命令如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo &#x2F;usr&#x2F;sbin&#x2F;hostapd &#x2F;etc&#x2F;hostapd&#x2F;hostapd.conf</span><br></pre></td></tr></table></figure>
<p>此时通过手机等设备已经可以搜到名字为RaspberryPi的WiFi，无需连接<br>如果没有问题，按Ctrl+C停止测试<br>使上述设置生效：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi &#x2F;etc&#x2F;default&#x2F;hostapd</span><br></pre></td></tr></table></figure></p>
<p>将<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#DAEMON_CONF&#x3D;&quot;&quot;</span><br></pre></td></tr></table></figure><br>修改为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DAEMON_CONF&#x3D;&quot;&#x2F;etc&#x2F;hostapd&#x2F;hostapd.conf&quot;</span><br></pre></td></tr></table></figure></p>
<hr>
<h1 id="安装DHCP服务"><a href="#安装DHCP服务" class="headerlink" title="安装DHCP服务"></a>安装DHCP服务</h1><p>安装命令如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install isc-dhcp-server</span><br></pre></td></tr></table></figure></p>
<p>备份配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mv &#x2F;etc&#x2F;dhcp&#x2F;dhcpd.conf &#x2F;etc&#x2F;dhcp&#x2F;dhcpd.config.bak</span><br></pre></td></tr></table></figure></p>
<p>编辑新的配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi &#x2F;etc&#x2F;dhcp&#x2F;dhcpd.conf</span><br></pre></td></tr></table></figure></p>
<p>修改成如下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">default-lease-time 600;</span><br><span class="line">max-lease-time 7200;</span><br><span class="line">log-facility local7;</span><br><span class="line"> </span><br><span class="line">subnet 192.168.8.0 netmask 255.255.255.0 &#123;</span><br><span class="line">  range 192.168.8.10 192.168.8.100;</span><br><span class="line">  option routers 192.168.8.1;</span><br><span class="line">  option broadcast-address 192.168.8.255;</span><br><span class="line">  option domain-name-servers 8.8.8.8,8.8.4.4;</span><br><span class="line">  default-lease-time 600;</span><br><span class="line">  max-lease-time 7200;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>此处设置的IP与上面的IP网关对应</p>
<p>重启服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service  isc-dhcp-server restart</span><br></pre></td></tr></table></figure></p>
<hr>
<h1 id="开启IPV4转发"><a href="#开启IPV4转发" class="headerlink" title="开启IPV4转发"></a>开启IPV4转发</h1><p>修改文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi &#x2F;etc&#x2F;sysctl.conf</span><br></pre></td></tr></table></figure></p>
<p>去掉<code>net.ipv4.ip_forward=1</code>前面的“#”号</p>
<p>通过<code>iptables</code>做NAT转发：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE</span><br><span class="line">sudo iptables -A FORWARD -i eth0 -o wlan0 -m state --state RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line">sudo iptables -A FORWARD -i wlan0 -o eth0 -j ACCEPT</span><br></pre></td></tr></table></figure></p>
<p>这些配置重启后就失效了，需要保存下来：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sh -c &quot;iptables-save &gt; &#x2F;etc&#x2F;iptables.ipv4.nat&quot;</span><br></pre></td></tr></table></figure></p>
<p>设为开机自动加载：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi &#x2F;etc&#x2F;rc.local</span><br></pre></td></tr></table></figure></p>
<p>在<code>exit 0</code>上方添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables-restore &lt; &#x2F;etc&#x2F;iptables.ipv4.nat</span><br></pre></td></tr></table></figure></p>
<p>启动服务并重启：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo service hostapd start</span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure></p>
<p>等树莓派重启完成，就可以用手机等设备连接该WiFi上网了，名字和密码是之前在<code>/etc/hostapd/hostapd.conf</code>文件中设定的。<br>连接后设备会获取到192.168.8.10—-192.168.8.100之间的IP，并且可以通过树莓派连接的有线网络连上互联网，起到了无线路由器的功能。</p>
<p>如果遇到问题，可以通过以下命令检查服务情况。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service hostapd status</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> 树莓派 Raspberry Pi </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[android手机通过数据线连接树莓派]]></title>
      <url>http://yoursite.com/2017/07/09/%25E6%2589%258B%25E6%259C%25BA%25E9%2580%259A%25E8%25BF%2587%25E6%2595%25B0%25E6%258D%25AE%25E7%25BA%25BF%25E8%25BF%259E%25E6%258E%25A5%25E6%25A0%2591%25E8%258E%2593%25E6%25B4%25BE/</url>
      <content type="html"><![CDATA[<p>在折腾树莓派的时候，我也发现不少在网上找到资料了，但是并不适用于自己的情况，所以还是有必要记录这些点滴的。<br><span id="more"></span></p>
<hr>
<h1 id="设备清单"><a href="#设备清单" class="headerlink" title="设备清单"></a>设备清单</h1><p>android手机（小米6-系统7.1），树莓派3B，数据线</p>
<hr>
<h1 id="app清单"><a href="#app清单" class="headerlink" title="app清单"></a>app清单</h1><p><img src="http://ost0gzer5.bkt.clouddn.com/IMG_20170808_214832.jpg-sample" alt="app list"></p>
<h2 id="JuiceSSH"><a href="#JuiceSSH" class="headerlink" title="JuiceSSH"></a>JuiceSSH</h2><p><img src="http://ost0gzer5.bkt.clouddn.com/Screenshot_2017-08-08-21-51-37-436_com.sonelli.juicessh.png-sample" alt=""><br>android上口碑爆棚的终端应用！</p>
<h2 id="Network-Scan"><a href="#Network-Scan" class="headerlink" title="Network Scan"></a>Network Scan</h2><p><img src="http://ost0gzer5.bkt.clouddn.com/Screenshot_2017-08-08-21-51-42-757_com.bitsworking.networkscanner.app.png-sample" alt=""><br>Network Scan可查找与手机处于同一网络下的所有设备对应的IP信息，当你无法确定树莓派当前的IP时，可通过此软件迅速查询到，下文就是通过USB共享网络后使用此app来得到树莓派的IP地址的</p>
<hr>
<h1 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h1><ol>
<li><p>首先确保树莓派开启了ssh功能，具体方法如下</p>
<blockquote>
<p>将最新系统烧写进SD卡，如果树莓派的SD卡工作在Windows环境下，则在”此电脑(我的电脑)”中可以看到一个名为”boot”的可移动磁盘，打开此磁盘，在磁盘根目录新建一个名为ssh(无后缀)的空文件，安全移除并弹出SD卡。如果此SD卡工作在Linux环境下，在终端中执行df命令你可以看到一个30m左右的fat32分区，cd进入此分区所对应的挂载点，用<code>touch ssh</code>命令创建名为ssh的文件，卸载并弹出SD卡</p>
</blockquote>
</li>
<li><p>给树莓派上电开机后，用数据线连接树莓派和手机，大部分手机可以在通知烂看到<code>正在通过USB充电</code>，代表连接成功</p>
</li>
<li><p>此时打开手机端的<code>USB网络共享</code>功能，再打开Network Scan，刷新后应该会在USB Network中看到一个带（ssh）标识的IP地址，这个就是树莓派的IP了，见下图</p>
<p> <img src="http://ost0gzer5.bkt.clouddn.com/Screenshot_2017-08-08-21-53-13-680_com.bitsworking.networkscanner.app.png-sample" alt=""></p>
</li>
<li><p>得到树莓派的IP之后就离胜利就不远了，打开JuiceSSH新建连接，认证信息中的昵称可随便填，用户名和密码的默认值为pi和raspberry，然后通过ssh登录树莓派，此处就不赘述了</p>
</li>
<li><p>之后树莓派便可以通过手机的USB网络共享而访问外部网络了，更新软件，安装vncserver什么的都可以了</p>
</li>
</ol>
<p>关于原理，这里摘自参考资料</p>
<blockquote>
<p>因为树莓派官方系统和安卓系统都是基于Linux内核，在Linux中，USB接口可以虚拟为有线网口，也就是说，用数据线连接树莓派和安卓手机，就相当于将两台电脑主机用网线连接一样，而通过”USB网络共享”这个功能，可以将手机虚拟为一个”路由器”，而让树莓派变成了一个”网络终端”，从而组建起一个微型的”局域网”。</p>
</blockquote>
<hr>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://mlapp.cn/179.html">树莓派折腾记:纯手机+数据线连接树莓派</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 树莓派 Raspberry Pi </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[树莓派raspberry关机和重启命令]]></title>
      <url>http://yoursite.com/2017/07/09/%25E6%25A0%2591%25E8%258E%2593%25E6%25B4%25BEraspberry%25E5%2585%25B3%25E6%259C%25BA%25E5%2592%258C%25E9%2587%258D%25E5%2590%25AF%25E5%2591%25BD%25E4%25BB%25A4/</url>
      <content type="html"><![CDATA[<p>树莓派没有像PC一样的电源开关，如果直接拔掉电源线，有可能会丢失数据甚至损坏SD卡，所以最稳妥的方法是用命令来关闭或者重启树莓派</p>
<span id="more"></span>
<p>关闭树莓派命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo shutdown -h now</span><br><span class="line">sudo halt</span><br><span class="line">sudo poweroff</span><br><span class="line">sudo init 0</span><br></pre></td></tr></table></figure>
<p>任意一个命令都可以，第一行中的’-h’表示将系统挂起，’now’立即执行</p>
<p>重启树莓派命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo shutdown -r now</span><br><span class="line">sudo reboot</span><br><span class="line">sudo shutdown -r 04:00:00 #定时重启，时间为凌晨四点</span><br></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> 树莓派 Raspberry Pi </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[记计算机博弈校内赛]]></title>
      <url>http://yoursite.com/2017/05/25/%25E8%25AE%25B0%25E8%25AE%25A1%25E7%25AE%2597%25E6%259C%25BA%25E5%258D%259A%25E5%25BC%2588%25E6%25A0%25A1%25E5%2586%2585%25E8%25B5%259B/</url>
      <content type="html"><![CDATA[<p>现在是大三下学期14周的周四，转眼这学期已进入了尾声，这学期做的主要的事情除了魔方机器人就是计算机博弈校内赛了，在14周周一当场答辩之后，校内赛终于可以说是告一段落了，而且最后也是happy ending，在这里记录一下这段宝贵的经历。</p>
<span id="more"></span>
<p>简单概括一下这事件，校内赛决赛一共八支队伍，我们队伍质疑了其中五支队伍，其中三支队伍当场退赛，剩下两只队伍在赛后1支成绩降等（主观上退赛），另一支队伍成绩降等，但是取消国赛资格，我们队伍和另一支队伍参加国赛。</p>
<hr>
<p>To be continued</p>
]]></content>
      
        
        <tags>
            
            <tag> 碎碎念 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[解魔方机器人调试遇到的问题]]></title>
      <url>http://yoursite.com/2017/03/31/%25E8%25A7%25A3%25E9%25AD%2594%25E6%2596%25B9%25E6%259C%25BA%25E5%2599%25A8%25E4%25BA%25BA%25E8%25B0%2583%25E8%25AF%2595%25E9%2581%2587%25E5%2588%25B0%25E7%259A%2584%25E9%2597%25AE%25E9%25A2%2598/</url>
      <content type="html"><![CDATA[<p>最近已经把解魔方机器人的机械搭完了，开始进入调程序部分，这里记录一下调程序过程遇到的问题</p>
<hr>
<ul>
<li>步进电机无反应</li>
</ul>
<p>先将步进电机插到别的驱动板上，再更换驱动板，最后发现是驱动板的STEP和DIR两根线插反了</p>
<span id="more"></span>
<hr>
<ul>
<li>步进电机偶尔会以非常慢的速度转动</li>
</ul>
<p>首先排查硬件，最后把问题定位出来发现是在调用<code>MultiStepper</code>类后再调用<code>AccelStepper</code>类导致的，最后不算解决，应该说是避免了这个问题，详情见问题3</p>
<hr>
<ul>
<li>将步进电机转动的方法变速<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stepper[id]-&gt;runToPosition();</span><br></pre></td></tr></table></figure>
改成匀速<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">while (stepper[id]-&gt;distanceToGo() !&#x3D; 0) &#123;</span><br><span class="line">      stepper[id]-&gt;runSpeed();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
电机以非常慢的速度转动</li>
</ul>
<p>去google了一下，发现有人遇到类似的情况，参考<a href="https://forum.arduino.cc/index.php?topic=305882.0">这里</a>的#4</p>
<blockquote>
<p>I solved the problem by</p>
</blockquote>
<blockquote>
<ul>
<li>calling setSpeed() and setMaxSpeed() in the Loop and thus constantly instead of only when a movement is ordered.</li>
<li>using runSpeedToPosition() instead of runSpeed() (good guess, Robin2)</li>
<li>calling stop() before ordering a new movement.</li>
</ul>
</blockquote>
<p>将代码改成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while (stepper[id]-&gt;distanceToGo() !&#x3D; 0) &#123;</span><br><span class="line">      stepper[id]-&gt;setSpeed(SPEED);</span><br><span class="line">      stepper[id]-&gt;runSpeedToPosition();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>问题解决，之后测试问题2，发现问题2也消失了</p>
<hr>
<ul>
<li>在整体旋转魔方时候，魔方经常掉</li>
</ul>
<p>这是由于机械臂夹的不够紧造成的，解决办法很简单，在每次旋转魔方前，让机械臂再“靠近”魔方一些</p>
]]></content>
      
        
        <tags>
            
            <tag> 解魔方机器人 </tag>
            
            <tag> Arduino </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[树莓派raspberry安装系统]]></title>
      <url>http://yoursite.com/2017/03/25/%25E6%25A0%2591%25E8%258E%2593%25E6%25B4%25BEraspberry%25E5%25AE%2589%25E8%25A3%2585%25E7%25B3%25BB%25E7%25BB%259F/</url>
      <content type="html"><![CDATA[<p>本文记载了在Ubuntu下面给树莓派安装NOOBS系统的过程。</p>
<p>总述一下准备过程，去官网下载NOOBS，解压后将文件放到格式化后的SD卡中即可，剩下的就把卡插到树莓派中，通电，树莓派会自动进入安装界面。</p>
<span id="more"></span>
<p>接下来说明一下在Ubuntu下面通过CLI格式SD卡的步骤。</p>
<p>这里使用<code>mkdosfs</code>（make-dos-files-system）命令来格式SD卡，文件格式为FAT32。格式SD卡前先需要查出SD卡的设备名称。</p>
<blockquote>
<p>首先在未插入SD卡时使用<code>df</code>命令查看所有的设备，之后再插入SD卡，再次使用<code>df</code>命令，多出来的设备即为SD卡。在笔者电脑上为<code>/dev/sdb1</code></p>
</blockquote>
<p>知道SD卡设备名称后先将SD卡卸载掉，命令如下</p>
<p><code>sudo umount /dev/sdb1</code></p>
<p>之后用<code>mkdosfs</code>命令来格式化SD卡，-F来指定文件格式，-v指定设备名称</p>
<p><code>sudo mkdosfs -F 32 -v /dev/sdb1</code></p>
<p>至此，SD卡格式化完成</p>
]]></content>
      
        
        <tags>
            
            <tag> 树莓派 Raspberry Pi </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[解魔方机器人第一阶段]]></title>
      <url>http://yoursite.com/2017/02/02/%25E8%25A7%25A3%25E9%25AD%2594%25E6%2596%25B9%25E6%259C%25BA%25E5%2599%25A8%25E4%25BA%25BA%25E7%25AC%25AC%25E4%25B8%2580%25E9%2598%25B6%25E6%25AE%25B5/</url>
      <content type="html"><![CDATA[<p>今天终于把第一阶段的解魔方app完成了（只是功能上完成，UI和交互完全没法看），在这里把遇到的问题和注意的事情给记录一下，写给未来可能会懵逼的自己。</p>
<p>之前没有系统地学过android编程，这次写app真可谓是举步维艰，还好github有相关的代码可以参考。</p>
<span id="more"></span>
<hr>
<h1 id="整体设计"><a href="#整体设计" class="headerlink" title="整体设计"></a>整体设计</h1><p>首先是从固定的九个点获取颜色（以HSV模型保存），确切地说是从固定的九个矩形中取平均颜色，但是矩形面积都不大。</p>
<blockquote>
<p>本来想用从画面中检测矩形的方法获取魔方颜色的，但是之前发现检测矩形并不稳定，而且android上安装opencv好像并不轻松，最后从实际角度考虑采用了稳妥的从九个点采颜色的方案。</p>
</blockquote>
<p>将魔方54个小块的颜色都采完之后，将颜色分类，并魔方状态转化为<code>UBL...</code>格式的字符串，U代表当前块的颜色为U面的颜色。</p>
<p>颜色分类的思想是将HSV值排序，按照一定特征分离颜色，具体步骤如下：</p>
<ol>
<li>按照S值升序排列，最小的9个值为白色块。</li>
<li>剩下的值，按照H值升序排列，从大到小分别为红，蓝，绿，黄，橙。</li>
</ol>
<blockquote>
<p>注意：在我测试的环境中，红色H值的区间大部分为350以上，少部分有10以下的，如果350以上的值不足9个的话，要从最小的值中补齐。<br>我的方法是将H值最小的9个元素复制到H值最大的元素后面，每次找到颜色开始的索引，向后取9个就是相同的9个颜色小块。</p>
</blockquote>
<p>最后利用上一步得到的魔方状态字符串绘制魔方（只会绘制展开图），并将字符串传给计算还原步骤的程序，这里我直接用的github上现成的程序，来源<a href="https://github.com/cs0x7f/min2phase">cs0x7f/min2phase</a>。</p>
<p>这个程序不光能以较少步数解出魔方，还能对不合法的状态进行判断，在这里对作者深表感谢。</p>
<hr>
<h1 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h1><ul>
<li>carmera类默认方向是横向，需要自行调整.</li>
<li>carmera预览尺寸和照片尺寸不一样。</li>
<li>SurfaceView尺寸如果不设定会自行拉伸，可能会导致预览画面的采样点和实际帧上坐标误差。</li>
<li>为了保证采样点坐标准确，我选择在预览帧里面采颜色的HSV值。</li>
<li>如果遇到了诡异的问题，记得Build-Rebuild Poject。</li>
<li>Color类中hsv的区间分别为[0, 360), [0, 1], [0, 1], 而opencv中区间为[0, 180), [0, 255], [0, 255], 为了提高精度建议把sv值乘以255。</li>
<li>调用解魔方的代码时，记得检查表示魔方状态字符串的格式，主要是中心块的顺序。</li>
<li>在没有给app相机权限的前提下，打开载入魔方的页面会直接退出app</li>
</ul>
<hr>
<h1 id="后续计划"><a href="#后续计划" class="headerlink" title="后续计划"></a>后续计划</h1><ul>
<li>改进UI</li>
<li>改进代码及文件结构</li>
<li>研究一下解魔方的2phase算法</li>
<li>绘制3D魔方</li>
</ul>
<hr>
<p>未完待续……</p>
]]></content>
      
        
        <tags>
            
            <tag> 解魔方机器人 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[解魔方机器人总体设计]]></title>
      <url>http://yoursite.com/2017/02/02/%25E8%25A7%25A3%25E9%25AD%2594%25E6%2596%25B9%25E6%259C%25BA%25E5%2599%25A8%25E4%25BA%25BA%25E6%2580%25BB%25E4%25BD%2593%25E8%25AE%25BE%25E8%25AE%25A1/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>不知道什么时候看到的一个基于三星手机和乐高积木的解魔方机器人获得世界记录的视频，自从那之后，自己做一个解魔方机器人的想法一直徘徊在脑海中挥之不去，直到现在，终于有机会来亲手把想法“变现”了，说实话，一直很少有这种把想法实现的经历，可能是自己比较看重这一点吧，所以这个魔方机器人对我来说另一层意义便是锻炼自己把想法实现的能力。</p>
<span id="more"></span>
<hr>
<h1 id="整体结构"><a href="#整体结构" class="headerlink" title="整体结构"></a>整体结构</h1><p>整体上分为三部分，android手机作为上位机，arduino作为下位机，还有机械部分。</p>
<h2 id="android上位机"><a href="#android上位机" class="headerlink" title="android上位机"></a>android上位机</h2><p>android上位机负责利用手机获取魔方状态，并计算出还原序列，将还原序列发送给下位机。</p>
<blockquote>
<p>本来想只是用arduino作为主控的，但是发现arduino计算性能太差，从经济的角度出发，便选择了arduino+android的方案</p>
</blockquote>
<h2 id="arduino下位机"><a href="#arduino下位机" class="headerlink" title="arduino下位机"></a>arduino下位机</h2><p>arduino下位机收到还原序列后控制机械部分还原魔方</p>
<p>目前打算使用UNO R3</p>
<h2 id="机械部分"><a href="#机械部分" class="headerlink" title="机械部分"></a>机械部分</h2><p>机械部分分为两个部分，动力部分和材料选择</p>
<h3 id="动力部分"><a href="#动力部分" class="headerlink" title="动力部分"></a>动力部分</h3><p>拟使用四步进电机二舵机的方案，综合速度与容错性</p>
<blockquote>
<p>用四舵机带动机械臂的方案由于舵机转动角度限制速度上略显疲软，六步进电机带动机械臂的方案由于要破坏中心块，由于个人不喜欢，也放弃</p>
</blockquote>
<h3 id="材料选择"><a href="#材料选择" class="headerlink" title="材料选择"></a>材料选择</h3><p>首选方案：乐高积木 <del>某宝上一两百一斤的那种兼容积木</del></p>
<p>备选方案：塑料条，角铝+亚克力切割</p>
<hr>
<h1 id="进度安排"><a href="#进度安排" class="headerlink" title="进度安排"></a>进度安排</h1><p>会因实际情况随时调整</p>
<h2 id="第一阶段"><a href="#第一阶段" class="headerlink" title="第一阶段"></a>第一阶段</h2><p>编写android端解魔方app，实现功能：通过摄像头获取魔方状态，计算出还原序列</p>
<h2 id="第二阶段"><a href="#第二阶段" class="headerlink" title="第二阶段"></a>第二阶段</h2><ul>
<li>android与arduino通讯</li>
<li>搭建电路</li>
<li>arduino控制电机</li>
<li>操作序列和步骤序列转换</li>
</ul>
<h2 id="第三阶段"><a href="#第三阶段" class="headerlink" title="第三阶段"></a>第三阶段</h2><p>搭建机械部分</p>
]]></content>
      
        
        <tags>
            
            <tag> 解魔方机器人 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[新的开始]]></title>
      <url>http://yoursite.com/2017/02/01/%25E6%2596%25B0%25E7%259A%2584%25E5%25BC%2580%25E5%25A7%258B/</url>
      <content type="html"><![CDATA[<p>2017，重新起航</p>
]]></content>
      
        
    </entry>
    
  
  
</search>
