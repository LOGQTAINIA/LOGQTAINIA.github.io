<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[用正则表达式判断一个二进制数能否被3整除]]></title>
      <url>http://yoursite.com/2017/09/07/%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%95%B0%E8%83%BD%E5%90%A6%E8%A2%AB3%E6%95%B4%E9%99%A4/</url>
      <content type="html"><![CDATA[<p>问题描述如标题，很简洁：用一个正则表达式判断一个二进制数能否被3整除</p>
<p>比如：<br>000         True<br>11        True<br>1001    True<br>1011     False</p>
<a id="more"></a>
<p>解决思路也很简单：首先用有限状态机（FSM）实现对能否被3整除的判断，然后将其转换成正则</p>
<p>有限状态机图如下，分析过程摘自matrix67，并在此感谢一下神犇</p>
<p><img src="http://www.matrix67.com/blogimage/200812011.gif" alt=""></p>
<blockquote>
<p>注意到，一个二进制数后面加一个“0”相当于该数乘以2，一个二进制数后面加一个“1”相当于该数乘2加1。设定三个状态，分别叫做0、1和2，它们表示当前的数除以3所得的余数。如果对于某个i和j，有i<em>2≡j (mod 3)，就加一条路径i→j，路径上标一个字符“0”；如果i</em>2+1≡j (mod 3)，则在路径i→j上标记“1”。状态0既是我们的初始状态，也是我们的最终状态。我们的自动机就做好了。现在，假如二进制数10010走进来了。从状态0出发，机器首先读到一个“1”，于是当前位置挪到状态1，表明目前该数模3余1；然后，系统读了一个“0”，我们紧跟着走到状态2，表明二进制数“10”被3除余2；下一步，我们回到状态1，表明“100”除以3余1；再往后，我们得知“1001”能被3整除。最后呢，我们读到一个0，“1001”的两倍当然还是能被3整除，我们依旧停留在原位。我们得到结论：二进制数10010能被3整除。<br>    有限状态自动机是可以转化为正则表达式的。上面的这个自动机转化起来非常容易。我们可以先试着用自然语言叙述一下。首先，每个二进制数第一位必然为“1”。到达状态1后，我们可以随意地、任意多次地在状态1周围绕圈圈，最终回到状态1。临近末尾，我们再读到一个“1”返回状态0，这之后随便读多少个“0”都可以了。现在问题分解为：我们又如何用正则表达式表述“从状态1出发随意地走最终回到状态1”呢？在本例中，这是很好描述的：它可以是字符串“1000..001”和“0111..110”的任意组合。把这些东西用正则表达式写出来，就是我们刚才那个神秘的式子：1((10<em>1)|(01</em>0))<em>10</em> 。</p>
</blockquote>
<p>最后再加上位置标识符，<code>^1((10*1)|(01*0))*10* $</code></p>
<p>从自然语言可以理解正则，但是从有限状态机转换到正则的通式通法还不会。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://blog.2baxb.me/archives/588" target="_blank" rel="external">使用正则表达式判断二进制数字是否能被3整除</a></p>
<p><a href="http://www.matrix67.com/blog/archives/1089" target="_blank" rel="external">趣题：用正则表达式判断一个二进制数是否能被3整除</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ubuntu下安装jsoncpp时遇到的坑]]></title>
      <url>http://yoursite.com/2017/07/21/ubuntu%E4%B8%8B%E5%AE%89%E8%A3%85jsoncpp%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/</url>
      <content type="html"><![CDATA[<p>为了在C++程序中解析json文件而选择了jsoncpp，但是安装过程并不是那么顺利，特写此文来记录踩过的坑<br><a id="more"></a><br>首先是执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libjsoncpp-dev</span><br></pre></td></tr></table></figure></p>
<p>时遇到如下报错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Errors were encountered while processing:</span><br><span class="line"> python-gtk2-dev</span><br><span class="line">E: Sub-process /usr/bin/dpkg returned an error code (1)</span><br></pre></td></tr></table></figure></p>
<p>解决办法：<br>分别执行下面两行命令，注意把<code>PACKAGE</code>替换为<code>python-gtk2-dev</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mv /var/lib/dpkg/info/PACKAGE.* /tmp/</span><br><span class="line">dpkg --remove --force-remove-reinstreq PACKAGE</span><br></pre></td></tr></table></figure></p>
<p>之后再执行<code>install</code>指令就能安装jsoncpp了</p>
<hr>
<p>安装后，使用如下命令编译时报错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ server.cpp -o server</span><br></pre></td></tr></table></figure></p>
<p>报错信息如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server.cpp:14:23: fatal error: json/json.h: No such file or directory</span><br><span class="line">compilation terminated.</span><br></pre></td></tr></table></figure></p>
<p>解决办法：<br>将代码中的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;json/json.h&gt;</span><br></pre></td></tr></table></figure></p>
<p>换成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;jsoncpp/json/json.h&gt;</span><br></pre></td></tr></table></figure></p>
<p>同时将编译命令换成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ server.cpp -o server -ljsoncpp</span><br></pre></td></tr></table></figure></p>
<hr>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://askubuntu.com/questions/618227/problems-with-python-gtk2-dev-after-update-to-ubuntu-15-04" target="_blank" rel="external">Problems with python-gtk2-dev after update to Ubuntu 15.04</a></p>
<p><a href="Fatal error with jsoncpp while compiling">Fatal error with jsoncpp while compiling</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[树莓派变身路由器]]></title>
      <url>http://yoursite.com/2017/07/19/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%8F%98%E8%BA%AB%E8%B7%AF%E7%94%B1%E5%99%A8/</url>
      <content type="html"><![CDATA[<p>最近在北海道大学参加HSI项目，由于宿舍没有无线网络，只有网线，而我又不想让笔记本24小时全天候开着当路由器，是时候折腾树莓派了！</p>
<p>因为最新的树莓派3板载了无线网络适配器，所以可以像手机一样开启热点，变身成一个路由器。<br><a id="more"></a></p>
<hr>
<h1 id="安装软件包"><a href="#安装软件包" class="headerlink" title="安装软件包"></a>安装软件包</h1><p>需要安装2个软件包</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install hostapd dnsmasq</span><br></pre></td></tr></table></figure>
<p>hostapd 是 Host Access Point 守护进程，提供对基于 Linux 的无线接入点的强 WPA2 加密和身份验证。配置 hostapd 非常简单，它支持 WPA2-Personal 和 Enterprise，提供了对 WPA2-Personal 的独特修改，可让管理它变得更复杂或更简单。</p>
<p>dnsmasq是一个小巧且方便地用于配置DNS和DHCP的工具，适用于小型网络，它提供了DNS功能和可选择的DHCP功能。主用适用于NAT的家庭网络，用modem，cable modem，ADSL设备连接到因特网。</p>
<hr>
<h1 id="设置静态IP"><a href="#设置静态IP" class="headerlink" title="设置静态IP"></a>设置静态IP</h1><p>需要将无线接口wlan0的IP配置成静态地址<br>首先让dhcpcd不再管理wlan0，避免设置冲突<br>修改文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/dhcpcd.conf</span><br></pre></td></tr></table></figure></p>
<p>在文件开头增加一行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">denyinterfaces wlan0</span><br></pre></td></tr></table></figure>
<p>接下来设置wlan0的静态IP，修改文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/network/interfaces</span><br></pre></td></tr></table></figure></p>
<p>把wlan0相关的内容改成为如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">allow-hotplug wlan0</span><br><span class="line">#iface wlan0 inet manual</span><br><span class="line">#    wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf</span><br><span class="line">iface wlan0 inet static</span><br><span class="line">	address 192.168.8.1</span><br><span class="line">	netmask 255.255.255.0</span><br><span class="line">	network 192.168.8.0</span><br><span class="line">	broadcast 192.168.8.255</span><br></pre></td></tr></table></figure></p>
<p>192.168.8.1是给树莓派做路由器分配的网关IP，不能与局域网其他路由器网关IP重复，若重复此处可改成其他网关。</p>
<p>重启服务和wlan0</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo service dhcpcd restart</span><br><span class="line">sudo ifdown wlan0</span><br><span class="line">sudo ifup wlan0</span><br></pre></td></tr></table></figure>
<p>通过<code>ifconfig</code>可以看到wlan0的IP已经被修改</p>
<p>PS：当时本想着让树莓派接入笔记本的热点，然后在笔记本上登录树莓派并配置，但是固定完IP之后就无法连入笔记本的热点了，最后是用手机USB数据线连接树莓派，手机登录树莓派，然后再用笔记本来远程控制手机，把手机屏幕和输入交给笔记本来搞的，别提多蛋疼了。。</p>
<hr>
<h1 id="配置hostapd"><a href="#配置hostapd" class="headerlink" title="配置hostapd"></a>配置hostapd</h1><p>新建配置文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/hostapd/hostapd.conf</span><br></pre></td></tr></table></figure>
<p>添加如下代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"># This is the name of the WiFi interface we configured above</span><br><span class="line">interface=wlan0</span><br><span class="line"></span><br><span class="line"># Use the nl80211 driver with the brcmfmac driver</span><br><span class="line">driver=nl80211</span><br><span class="line"></span><br><span class="line"># This is the name of the network</span><br><span class="line">ssid=RaspberryPi</span><br><span class="line"></span><br><span class="line"># Use the 2.4GHz band</span><br><span class="line">hw_mode=g</span><br><span class="line"></span><br><span class="line"># Use channel 6</span><br><span class="line">channel=6</span><br><span class="line"></span><br><span class="line"># Enable 802.11n</span><br><span class="line">ieee80211n=1</span><br><span class="line"></span><br><span class="line"># Enable WMM</span><br><span class="line">wmm_enabled=1</span><br><span class="line"></span><br><span class="line"># Enable 40MHz channels with 20ns guard interval</span><br><span class="line">ht_capab=[HT40][SHORT-GI-20][DSSS_CCK-40]</span><br><span class="line"></span><br><span class="line"># Accept all MAC addresses</span><br><span class="line">macaddr_acl=0</span><br><span class="line"></span><br><span class="line"># Use WPA authentication</span><br><span class="line">auth_algs=1</span><br><span class="line"></span><br><span class="line"># Require clients to know the network name</span><br><span class="line">ignore_broadcast_ssid=0</span><br><span class="line"></span><br><span class="line"># Use WPA2</span><br><span class="line">wpa=2</span><br><span class="line"></span><br><span class="line"># Use a pre-shared key</span><br><span class="line">wpa_key_mgmt=WPA-PSK</span><br><span class="line"></span><br><span class="line"># The network passphrase</span><br><span class="line">wpa_passphrase=raspberry</span><br><span class="line"></span><br><span class="line"># Use AES, instead of TKIP</span><br><span class="line">rsn_pairwise=CCMP</span><br></pre></td></tr></table></figure>
<p>上述代码中，<code>ssid</code>和<code>wpa_passphrase</code>分别是无线网络的名字和密码（密码需8位以上）</p>
<p>然后测试配置是否正确，命令如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/sbin/hostapd /etc/hostapd/hostapd.conf</span><br></pre></td></tr></table></figure>
<p>此时通过手机等设备已经可以搜到名字为RaspberryPi的WiFi，无需连接<br>如果没有问题，按Ctrl+C停止测试<br>使上述设置生效：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/default/hostapd</span><br></pre></td></tr></table></figure></p>
<p>将<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#DAEMON_CONF=&quot;&quot;</span><br></pre></td></tr></table></figure></p>
<p>修改为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DAEMON_CONF=&quot;/etc/hostapd/hostapd.conf&quot;</span><br></pre></td></tr></table></figure></p>
<hr>
<h1 id="安装DHCP服务"><a href="#安装DHCP服务" class="headerlink" title="安装DHCP服务"></a>安装DHCP服务</h1><p>安装命令如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install isc-dhcp-server</span><br></pre></td></tr></table></figure></p>
<p>备份配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mv /etc/dhcp/dhcpd.conf /etc/dhcp/dhcpd.config.bak</span><br></pre></td></tr></table></figure></p>
<p>编辑新的配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/dhcp/dhcpd.conf</span><br></pre></td></tr></table></figure></p>
<p>修改成如下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">default-lease-time 600;</span><br><span class="line">max-lease-time 7200;</span><br><span class="line">log-facility local7;</span><br><span class="line"> </span><br><span class="line">subnet 192.168.8.0 netmask 255.255.255.0 &#123;</span><br><span class="line">  range 192.168.8.10 192.168.8.100;</span><br><span class="line">  option routers 192.168.8.1;</span><br><span class="line">  option broadcast-address 192.168.8.255;</span><br><span class="line">  option domain-name-servers 8.8.8.8,8.8.4.4;</span><br><span class="line">  default-lease-time 600;</span><br><span class="line">  max-lease-time 7200;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>此处设置的IP与上面的IP网关对应</p>
<p>重启服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service  isc-dhcp-server restart</span><br></pre></td></tr></table></figure></p>
<hr>
<h1 id="开启IPV4转发"><a href="#开启IPV4转发" class="headerlink" title="开启IPV4转发"></a>开启IPV4转发</h1><p>修改文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/sysctl.conf</span><br></pre></td></tr></table></figure></p>
<p>去掉<code>net.ipv4.ip_forward=1</code>前面的“#”号</p>
<p>通过<code>iptables</code>做NAT转发：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE</span><br><span class="line">sudo iptables -A FORWARD -i eth0 -o wlan0 -m state --state RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line">sudo iptables -A FORWARD -i wlan0 -o eth0 -j ACCEPT</span><br></pre></td></tr></table></figure></p>
<p>这些配置重启后就失效了，需要保存下来：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sh -c &quot;iptables-save &gt; /etc/iptables.ipv4.nat&quot;</span><br></pre></td></tr></table></figure></p>
<p>设为开机自动加载：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/rc.local</span><br></pre></td></tr></table></figure></p>
<p>在<code>exit 0</code>上方添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables-restore &lt; /etc/iptables.ipv4.nat</span><br></pre></td></tr></table></figure></p>
<p>启动服务并重启：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo service hostapd start</span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure></p>
<p>等树莓派重启完成，就可以用手机等设备连接该WiFi上网了，名字和密码是之前在<code>/etc/hostapd/hostapd.conf</code>文件中设定的。<br>连接后设备会获取到192.168.8.10—-192.168.8.100之间的IP，并且可以通过树莓派连接的有线网络连上互联网，起到了无线路由器的功能。</p>
<p>如果遇到问题，可以通过以下命令检查服务情况。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service hostapd status</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android手机通过数据线连接树莓派]]></title>
      <url>http://yoursite.com/2017/07/09/%E6%89%8B%E6%9C%BA%E9%80%9A%E8%BF%87%E6%95%B0%E6%8D%AE%E7%BA%BF%E8%BF%9E%E6%8E%A5%E6%A0%91%E8%8E%93%E6%B4%BE/</url>
      <content type="html"><![CDATA[<p>在折腾树莓派的时候，我也发现不少在网上找到资料了，但是并不适用于自己的情况，所以还是有必要记录这些点滴的。<br><a id="more"></a></p>
<hr>
<h1 id="设备清单"><a href="#设备清单" class="headerlink" title="设备清单"></a>设备清单</h1><p>android手机（小米6-系统7.1），树莓派3B，数据线</p>
<hr>
<h1 id="app清单"><a href="#app清单" class="headerlink" title="app清单"></a>app清单</h1><p><img src="http://ost0gzer5.bkt.clouddn.com/IMG_20170808_214832.jpg-sample" alt="app list"></p>
<h2 id="JuiceSSH"><a href="#JuiceSSH" class="headerlink" title="JuiceSSH"></a>JuiceSSH</h2><p><img src="http://ost0gzer5.bkt.clouddn.com/Screenshot_2017-08-08-21-51-37-436_com.sonelli.juicessh.png-sample" alt=""><br>android上口碑爆棚的终端应用！</p>
<h2 id="Network-Scan"><a href="#Network-Scan" class="headerlink" title="Network Scan"></a>Network Scan</h2><p><img src="http://ost0gzer5.bkt.clouddn.com/Screenshot_2017-08-08-21-51-42-757_com.bitsworking.networkscanner.app.png-sample" alt=""><br>Network Scan可查找与手机处于同一网络下的所有设备对应的IP信息，当你无法确定树莓派当前的IP时，可通过此软件迅速查询到，下文就是通过USB共享网络后使用此app来得到树莓派的IP地址的</p>
<hr>
<h1 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h1><ol>
<li><p>首先确保树莓派开启了ssh功能，具体方法如下</p>
<blockquote>
<p>将最新系统烧写进SD卡，如果树莓派的SD卡工作在Windows环境下，则在”此电脑(我的电脑)”中可以看到一个名为”boot”的可移动磁盘，打开此磁盘，在磁盘根目录新建一个名为ssh(无后缀)的空文件，安全移除并弹出SD卡。如果此SD卡工作在Linux环境下，在终端中执行df命令你可以看到一个30m左右的fat32分区，cd进入此分区所对应的挂载点，用<code>touch ssh</code>命令创建名为ssh的文件，卸载并弹出SD卡</p>
</blockquote>
</li>
<li><p>给树莓派上电开机后，用数据线连接树莓派和手机，大部分手机可以在通知烂看到<code>正在通过USB充电</code>，代表连接成功</p>
</li>
<li><p>此时打开手机端的<code>USB网络共享</code>功能，再打开Network Scan，刷新后应该会在USB Network中看到一个带（ssh）标识的IP地址，这个就是树莓派的IP了，见下图</p>
<p> <img src="http://ost0gzer5.bkt.clouddn.com/Screenshot_2017-08-08-21-53-13-680_com.bitsworking.networkscanner.app.png-sample" alt=""></p>
</li>
<li><p>得到树莓派的IP之后就离胜利就不远了，打开JuiceSSH新建连接，认证信息中的昵称可随便填，用户名和密码的默认值为pi和raspberry，然后通过ssh登录树莓派，此处就不赘述了</p>
</li>
<li><p>之后树莓派便可以通过手机的USB网络共享而访问外部网络了，更新软件，安装vncserver什么的都可以了</p>
</li>
</ol>
<p>关于原理，这里摘自参考资料</p>
<blockquote>
<p>因为树莓派官方系统和安卓系统都是基于Linux内核，在Linux中，USB接口可以虚拟为有线网口，也就是说，用数据线连接树莓派和安卓手机，就相当于将两台电脑主机用网线连接一样，而通过”USB网络共享”这个功能，可以将手机虚拟为一个”路由器”，而让树莓派变成了一个”网络终端”，从而组建起一个微型的”局域网”。</p>
</blockquote>
<hr>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://mlapp.cn/179.html" target="_blank" rel="external">树莓派折腾记:纯手机+数据线连接树莓派</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[树莓派raspberry关机和重启命令]]></title>
      <url>http://yoursite.com/2017/07/09/%E6%A0%91%E8%8E%93%E6%B4%BEraspberry%E5%85%B3%E6%9C%BA%E5%92%8C%E9%87%8D%E5%90%AF%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<p>树莓派没有像PC一样的电源开关，如果直接拔掉电源线，有可能会丢失数据甚至损坏SD卡，所以最稳妥的方法是用命令来关闭或者重启树莓派</p>
<a id="more"></a>
<p>关闭树莓派命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo shutdown -h now</span><br><span class="line">sudo halt</span><br><span class="line">sudo poweroff</span><br><span class="line">sudo init 0</span><br></pre></td></tr></table></figure>
<p>任意一个命令都可以，第一行中的’-h’表示将系统挂起，’now’立即执行</p>
<p>重启树莓派命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo shutdown -r now</span><br><span class="line">sudo reboot</span><br><span class="line">sudo shutdown -r 04:00:00 #定时重启，时间为凌晨四点</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[记计算机博弈校内赛]]></title>
      <url>http://yoursite.com/2017/05/25/%E8%AE%B0%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8D%9A%E5%BC%88%E6%A0%A1%E5%86%85%E8%B5%9B/</url>
      <content type="html"><![CDATA[<p>现在是大三下学期14周的周四，转眼这学期已进入了尾声，这学期做的主要的事情除了魔方机器人就是计算机博弈校内赛了，在14周周一当场答辩之后，校内赛终于可以说是告一段落了，而且最后也是happy ending，在这里记录一下这段宝贵的经历。</p>
<a id="more"></a>
<p>简单概括一下这事件，校内赛决赛一共八支队伍，我们队伍质疑了其中五支队伍，其中三支队伍当场退赛，剩下两只队伍在赛后1支成绩降等（主观上退赛），另一支队伍成绩降等，但是取消国赛资格，我们队伍和另一支队伍参加国赛。</p>
<hr>
<p>To be continued</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[解魔方机器人调试遇到的问题]]></title>
      <url>http://yoursite.com/2017/03/31/%E8%A7%A3%E9%AD%94%E6%96%B9%E6%9C%BA%E5%99%A8%E4%BA%BA%E8%B0%83%E8%AF%95%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>最近已经把解魔方机器人的机械搭完了，开始进入调程序部分，这里记录一下调程序过程遇到的问题</p>
<hr>
<ul>
<li>步进电机无反应</li>
</ul>
<p>先将步进电机插到别的驱动板上，再更换驱动板，最后发现是驱动板的STEP和DIR两根线插反了</p>
<a id="more"></a>
<hr>
<ul>
<li>步进电机偶尔会以非常慢的速度转动</li>
</ul>
<p>首先排查硬件，最后把问题定位出来发现是在调用<code>MultiStepper</code>类后再调用<code>AccelStepper</code>类导致的，最后不算解决，应该说是避免了这个问题，详情见问题3</p>
<hr>
<ul>
<li>将步进电机转动的方法变速<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stepper[id]-&gt;runToPosition();</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>改成匀速<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">while (stepper[id]-&gt;distanceToGo() != 0) &#123;</span><br><span class="line">      stepper[id]-&gt;runSpeed();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>电机以非常慢的速度转动</p>
<p>去google了一下，发现有人遇到类似的情况，参考<a href="https://forum.arduino.cc/index.php?topic=305882.0" target="_blank" rel="external">这里</a>的#4</p>
<blockquote>
<p>I solved the problem by</p>
<ul>
<li>calling setSpeed() and setMaxSpeed() in the Loop and thus constantly instead of only when a movement is ordered.</li>
<li>using runSpeedToPosition() instead of runSpeed() (good guess, Robin2)</li>
<li>calling stop() before ordering a new movement.</li>
</ul>
</blockquote>
<p>将代码改成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while (stepper[id]-&gt;distanceToGo() != 0) &#123;</span><br><span class="line">      stepper[id]-&gt;setSpeed(SPEED);</span><br><span class="line">      stepper[id]-&gt;runSpeedToPosition();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>问题解决，之后测试问题2，发现问题2也消失了</p>
<hr>
<ul>
<li>在整体旋转魔方时候，魔方经常掉</li>
</ul>
<p>这是由于机械臂夹的不够紧造成的，解决办法很简单，在每次旋转魔方前，让机械臂再“靠近”魔方一些</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[树莓派raspberry安装系统]]></title>
      <url>http://yoursite.com/2017/03/25/%E6%A0%91%E8%8E%93%E6%B4%BEraspberry%E5%AE%89%E8%A3%85%E7%B3%BB%E7%BB%9F/</url>
      <content type="html"><![CDATA[<p>本文记载了在Ubuntu下面给树莓派安装NOOBS系统的过程。</p>
<p>总述一下准备过程，去官网下载NOOBS，解压后将文件放到格式化后的SD卡中即可，剩下的就把卡插到树莓派中，通电，树莓派会自动进入安装界面。</p>
<a id="more"></a>
<p>接下来说明一下在Ubuntu下面通过CLI格式SD卡的步骤。</p>
<p>这里使用<code>mkdosfs</code>（make-dos-files-system）命令来格式SD卡，文件格式为FAT32。格式SD卡前先需要查出SD卡的设备名称。</p>
<blockquote>
<p>首先在未插入SD卡时使用<code>df</code>命令查看所有的设备，之后再插入SD卡，再次使用<code>df</code>命令，多出来的设备即为SD卡。在笔者电脑上为<code>/dev/sdb1</code></p>
</blockquote>
<p>知道SD卡设备名称后先将SD卡卸载掉，命令如下</p>
<p><code>sudo umount /dev/sdb1</code></p>
<p>之后用<code>mkdosfs</code>命令来格式化SD卡，-F来指定文件格式，-v指定设备名称</p>
<p><code>sudo mkdosfs -F 32 -v /dev/sdb1</code></p>
<p>至此，SD卡格式化完成</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[解魔方机器人第一阶段]]></title>
      <url>http://yoursite.com/2017/02/02/%E8%A7%A3%E9%AD%94%E6%96%B9%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/</url>
      <content type="html"><![CDATA[<p>今天终于把第一阶段的解魔方app完成了（只是功能上完成，UI和交互完全没法看），在这里把遇到的问题和注意的事情给记录一下，写给未来可能会懵逼的自己。</p>
<p>之前没有系统地学过android编程，这次写app真可谓是举步维艰，还好github有相关的代码可以参考。</p>
<a id="more"></a>
<hr>
<h1 id="整体设计"><a href="#整体设计" class="headerlink" title="整体设计"></a>整体设计</h1><p>首先是从固定的九个点获取颜色（以HSV模型保存），确切地说是从固定的九个矩形中取平均颜色，但是矩形面积都不大。</p>
<blockquote>
<p>本来想用从画面中检测矩形的方法获取魔方颜色的，但是之前发现检测矩形并不稳定，而且android上安装opencv好像并不轻松，最后从实际角度考虑采用了稳妥的从九个点采颜色的方案。</p>
</blockquote>
<p>将魔方54个小块的颜色都采完之后，将颜色分类，并魔方状态转化为<code>UBL...</code>格式的字符串，U代表当前块的颜色为U面的颜色。</p>
<p>颜色分类的思想是将HSV值排序，按照一定特征分离颜色，具体步骤如下：</p>
<ol>
<li>按照S值升序排列，最小的9个值为白色块。</li>
<li>剩下的值，按照H值升序排列，从大到小分别为红，蓝，绿，黄，橙。</li>
</ol>
<blockquote>
<p>注意：在我测试的环境中，红色H值的区间大部分为350以上，少部分有10以下的，如果350以上的值不足9个的话，要从最小的值中补齐。<br>我的方法是将H值最小的9个元素复制到H值最大的元素后面，每次找到颜色开始的索引，向后取9个就是相同的9个颜色小块。</p>
</blockquote>
<p>最后利用上一步得到的魔方状态字符串绘制魔方（只会绘制展开图），并将字符串传给计算还原步骤的程序，这里我直接用的github上现成的程序，来源<a href="https://github.com/cs0x7f/min2phase" target="_blank" rel="external">cs0x7f/min2phase</a>。</p>
<p>这个程序不光能以较少步数解出魔方，还能对不合法的状态进行判断，在这里对作者深表感谢。</p>
<hr>
<h1 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h1><ul>
<li>carmera类默认方向是横向，需要自行调整.</li>
<li>carmera预览尺寸和照片尺寸不一样。</li>
<li>SurfaceView尺寸如果不设定会自行拉伸，可能会导致预览画面的采样点和实际帧上坐标误差。</li>
<li>为了保证采样点坐标准确，我选择在预览帧里面采颜色的HSV值。</li>
<li>如果遇到了诡异的问题，记得Build-Rebuild Poject。</li>
<li>Color类中hsv的区间分别为[0, 360), [0, 1], [0, 1], 而opencv中区间为[0, 180), [0, 255], [0, 255], 为了提高精度建议把sv值乘以255。</li>
<li>调用解魔方的代码时，记得检查表示魔方状态字符串的格式，主要是中心块的顺序。</li>
<li>在没有给app相机权限的前提下，打开载入魔方的页面会直接退出app</li>
</ul>
<hr>
<h1 id="后续计划"><a href="#后续计划" class="headerlink" title="后续计划"></a>后续计划</h1><ul>
<li>改进UI</li>
<li>改进代码及文件结构</li>
<li>研究一下解魔方的2phase算法</li>
<li>绘制3D魔方</li>
</ul>
<hr>
<p>未完待续……</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[解魔方机器人总体设计]]></title>
      <url>http://yoursite.com/2017/02/02/%E8%A7%A3%E9%AD%94%E6%96%B9%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%80%BB%E4%BD%93%E8%AE%BE%E8%AE%A1/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>不知道什么时候看到的一个基于三星手机和乐高积木的解魔方机器人获得世界记录的视频，自从那之后，自己做一个解魔方机器人的想法一直徘徊在脑海中挥之不去，直到现在，终于有机会来亲手把想法“变现”了，说实话，一直很少有这种把想法实现的经历，可能是自己比较看重这一点吧，所以这个魔方机器人对我来说另一层意义便是锻炼自己把想法实现的能力。</p>
<h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><h1 id="整体结构"><a href="#整体结构" class="headerlink" title="整体结构"></a>整体结构</h1><p>整体上分为三部分，android手机作为上位机，arduino作为下位机，还有机械部分。</p>
<h2 id="android上位机"><a href="#android上位机" class="headerlink" title="android上位机"></a>android上位机</h2><p>android上位机负责利用手机获取魔方状态，并计算出还原序列，将还原序列发送给下位机。</p>
<blockquote>
<p>本来想只是用arduino作为主控的，但是发现arduino计算性能太差，从经济的角度出发，便选择了arduino+android的方案</p>
</blockquote>
<h2 id="arduino下位机"><a href="#arduino下位机" class="headerlink" title="arduino下位机"></a>arduino下位机</h2><p>arduino下位机收到还原序列后控制机械部分还原魔方</p>
<p>目前打算使用UNO R3</p>
<h2 id="机械部分"><a href="#机械部分" class="headerlink" title="机械部分"></a>机械部分</h2><p>机械部分分为两个部分，动力部分和材料选择</p>
<h3 id="动力部分"><a href="#动力部分" class="headerlink" title="动力部分"></a>动力部分</h3><p>拟使用四步进电机二舵机的方案，综合速度与容错性</p>
<blockquote>
<p>用四舵机带动机械臂的方案由于舵机转动角度限制速度上略显疲软，六步进电机带动机械臂的方案由于要破坏中心块，由于个人不喜欢，也放弃</p>
</blockquote>
<h3 id="材料选择"><a href="#材料选择" class="headerlink" title="材料选择"></a>材料选择</h3><p>首选方案：乐高积木 <del>某宝上一两百一斤的那种兼容积木</del></p>
<p>备选方案：塑料条，角铝+亚克力切割</p>
<hr>
<h1 id="进度安排"><a href="#进度安排" class="headerlink" title="进度安排"></a>进度安排</h1><p>会因实际情况随时调整</p>
<h2 id="第一阶段"><a href="#第一阶段" class="headerlink" title="第一阶段"></a>第一阶段</h2><p>编写android端解魔方app，实现功能：通过摄像头获取魔方状态，计算出还原序列</p>
<h2 id="第二阶段"><a href="#第二阶段" class="headerlink" title="第二阶段"></a>第二阶段</h2><ul>
<li>android与arduino通讯</li>
<li>搭建电路</li>
<li>arduino控制电机</li>
<li>操作序列和步骤序列转换</li>
</ul>
<h2 id="第三阶段"><a href="#第三阶段" class="headerlink" title="第三阶段"></a>第三阶段</h2><p>搭建机械部分</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[新的开始]]></title>
      <url>http://yoursite.com/2017/02/01/%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/</url>
      <content type="html"><![CDATA[<p>2017，重新起航</p>
]]></content>
    </entry>
    
  
  
</search>
